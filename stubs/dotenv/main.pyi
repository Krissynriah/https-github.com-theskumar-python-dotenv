import os
import sys
from typing import Dict, IO, Iterator, List, NamedTuple, Optional, Text, Tuple, Union

if sys.version_info >= (3, 6):
    _PathLike = os.PathLike
else:
    _PathLike = Text

if sys.version_info >= (3, 0):
    from io import StringIO
    _StringIO = StringIO
else:
    from StringIO import StringIO
    _StringIO = StringIO[Text]

Binding = NamedTuple("Binding", [("key", Optional[Text]),
                                 ("value", Optional[Text]),
                                 ("original", Text)])

def decode_escapes(string: Text) -> Text: ...
def is_surrounded_by(string: Text, char: Text) -> bool: ...
def parse_binding(string: Text, position: int) -> Tuple[Binding, int]: ...
def parse_stream(stream: IO[Text]) -> Iterator[Binding]: ...

class DotEnv:
    dotenv_path: Union[Text, _PathLike, _StringIO] = ...
    verbose: bool = ...
    def __init__(self, dotenv_path: Union[Text, _PathLike, _StringIO], verbose: bool=...) -> None: ...
    def dict(self) -> Dict[Text, Text]: ...
    def parse(self) -> Iterator[Tuple[Text, Text]]: ...
    def set_as_environment_variables(self, override: bool=...) -> bool: ...
    def get(self, key: Text) -> Optional[Text]: ...

def get_key(dotenv_path: Union[Text, _PathLike], key_to_get: Text) -> Optional[Text]: ...
def rewrite(path: _PathLike) -> Iterator[Tuple[IO[Text], IO[Text]]]: ...
def set_key(dotenv_path: _PathLike, key_to_set: Text, value_to_set: Text, quote_mode: Text=...) -> Tuple[Optional[bool], Text, Text]: ...
def unset_key(dotenv_path: _PathLike, key_to_unset: Text, quote_mode: Text=...) -> Tuple[Optional[bool], Text]: ...
def resolve_nested_variables(values: Dict[Text, Text]) -> Dict[Text, Text]: ...
def find_dotenv(filename: Text=..., raise_error_if_not_found: bool=..., usecwd: bool=...) -> Text: ...
def load_dotenv(dotenv_path: Union[Text, _PathLike, None]=..., stream: Optional[_StringIO]=..., verbose: bool=..., override: bool=...) -> bool: ...
def dotenv_values(dotenv_path: Union[Text, _PathLike, None]=..., stream: Optional[_StringIO]=..., verbose: bool=...) -> Dict[Text, Text]: ...
def run_command(command: List[str], env: Dict[str, str]) -> int: ...
